# ============================================================================
# MovieLens Recommender System - User-Based Collaborative Filtering
# 
# This script uses a previously saved UBCF model if available, or creates
# a new one if not found.
# ============================================================================

# Load required libraries
library(tidyverse)      # For data manipulation
library(recommenderlab) # For recommender algorithms
library(Matrix)         # For sparse matrices

# Create directory for models if it doesn't exist
dir.create("models", showWarnings = FALSE)

# ============================================================================
# 1. Check if a saved model exists
# ============================================================================
model_path <- "models/ubcf_model.rds"

if (file.exists(model_path)) {
  cat("Loading existing UBCF model from", model_path, "...\n")
  ubcf_model <- readRDS(model_path)
  
  # We also need to load the evaluation scheme and data for testing
  if (file.exists("models/eval_scheme.rds") && 
      file.exists("models/r_matrix.rds") && 
      file.exists("data/movies_filtered.csv")) {
    
    eval_scheme <- readRDS("models/eval_scheme.rds")
    r_matrix <- readRDS("models/r_matrix.rds")
    movies_filtered <- read.csv("data/movies_filtered.csv")
    
    cat("Loaded existing evaluation scheme and data\n")
  } else {
    cat("Saved model found, but missing evaluation scheme or data. Will create new ones.\n")
    # Continue with data loading and preparation
  }
} else {
  cat("No existing model found. Will create a new UBCF model.\n")
}

# If we don't have a loaded model and data, proceed with loading and preparation
if (!exists("ubcf_model") || !exists("eval_scheme") || !exists("r_matrix") || !exists("movies_filtered")) {
  # ============================================================================
  # 2. Load and Prepare Data
  # ============================================================================
  cat("Loading and preparing data...\n")
  
  # Load movies and ratings data
  movies <- read.csv("data/movies.csv")
  ratings <- read.csv("data/ratings.csv")
  
  # Process movies: extract year from title
  movies_processed <- movies %>%
    mutate(
      year = as.numeric(str_extract(str_extract(title, "\\(\\d{4}\\)$"), "\\d{4}")),
      title_clean = str_remove(title, " \\(\\d{4}\\)$")
    )
  
  # Keep only the necessary columns from ratings
  ratings_processed <- ratings %>%
    select(userId, movieId, rating)
  
  # Filter out users and movies with too few ratings
  min_ratings_user <- 5   # Minimum ratings per user
  min_ratings_movie <- 5  # Minimum ratings per movie
  
  # Get lists of users and movies that meet criteria
  active_users <- ratings_processed %>%
    count(userId) %>%
    filter(n >= min_ratings_user) %>%
    pull(userId)
  
  popular_movies <- ratings_processed %>%
    count(movieId) %>%
    filter(n >= min_ratings_movie) %>%
    pull(movieId)
  
  # Filter ratings
  ratings_filtered <- ratings_processed %>%
    filter(userId %in% active_users, 
           movieId %in% popular_movies)
  
  # Filter movies to match filtered ratings
  movies_filtered <- movies_processed %>%
    filter(movieId %in% popular_movies)
  
  # Save filtered movies for future use
  write.csv(movies_filtered, "data/movies_filtered.csv", row.names = FALSE)
  
  cat("Filtered data: ", nrow(ratings_filtered), "ratings from", 
      length(active_users), "users on", length(popular_movies), "movies\n")
  
  # ============================================================================
  # 3. Create User-Item Matrix
  # ============================================================================
  cat("Creating user-item matrix...\n")
  
  # Create a sparse matrix of ratings
  ratings_matrix <- ratings_filtered %>%
    pivot_wider(
      id_cols = userId,
      names_from = movieId,
      values_from = rating
    )
  
  # Convert userId to rownames and remove the column
  ratings_matrix_values <- as.matrix(ratings_matrix %>% select(-userId))
  rownames(ratings_matrix_values) <- ratings_matrix$userId
  
  # Convert to recommenderlab realRatingMatrix
  r_matrix <- as(ratings_matrix_values, "realRatingMatrix")
  
  # Save r_matrix for future use
  saveRDS(r_matrix, "models/r_matrix.rds")
  
  cat("Created user-item matrix with dimensions:", dim(r_matrix), "\n")
  
  # ============================================================================
  # 4. Create Train-Test Split
  # ============================================================================
  cat("Creating train-test split...\n")
  
  # Set seed for reproducibility
  set.seed(123)
  
  # Create evaluation scheme with proper goodRating parameter
  eval_scheme <- evaluationScheme(
    r_matrix,
    method = "split",
    train = 0.8,  # 80% for training
    given = 5,    # Use 5 known ratings per user for prediction
    goodRating = 3.5  # Ratings >= 3.5 are considered "good"
  )
  
  # Save evaluation scheme for future use
  saveRDS(eval_scheme, "models/eval_scheme.rds")
  
  cat("Created evaluation scheme with 80% training data\n")
  
  # ============================================================================
  # 5. Build UBCF Model (if not already loaded)
  # ============================================================================
  if (!exists("ubcf_model")) {
    cat("Building UBCF model...\n")
    
    # Train a UBCF model on the training data
    ubcf_model <- Recommender(
      getData(eval_scheme, "train"),
      method = "UBCF",
      parameter = list(
        nn = 30,            # Number of nearest neighbors
        method = "cosine",  # Similarity measure
        normalize = "center" # Center ratings by user mean
      )
    )
    
    # Save the model
    saveRDS(ubcf_model, "models/ubcf_model.rds")
    
    cat("UBCF model built and saved to models/ubcf_model.rds\n")
  }
}

# ============================================================================
# 6. Generate Sample Recommendations
# ============================================================================
cat("Generating sample recommendations...\n")

# Function to get recommendations for a user
get_recommendations <- function(model, user_id, n = 10) {
  # Get user data from the training set
  user_data <- getData(eval_scheme, "known")[user_id, ]
  
  # Generate predictions
  predictions <- predict(model, user_data, n = n)
  
  # Convert to list
  rec_list <- as(predictions, "list")
  
  # Get movie IDs
  movie_ids <- rec_list[[1]]
  
  # Get movie details
  rec_movies <- movies_filtered %>%
    filter(movieId %in% movie_ids) %>%
    select(movieId, title, year, genres) %>%
    arrange(match(movieId, movie_ids))
  
  return(rec_movies)
}

# Get a sample user ID from the test set
sample_users <- sample(rownames(getData(eval_scheme, "known")), 3)

# Generate recommendations for sample users
for (user in sample_users) {
  cat("\nRecommendations for User", user, ":\n")
  recs <- get_recommendations(ubcf_model, user, n = 10)
  print(recs)
}

# ============================================================================
# 7. Evaluate the Model
# ============================================================================
cat("\nEvaluating UBCF model...\n")

# Evaluate model using standard evaluation metrics
ubcf_eval <- evaluate(
  eval_scheme,
  method = "UBCF",
  parameter = list(
    nn = 30,
    method = "cosine"
  ),
  n = c(1, 5, 10, 15, 20)  # Different recommendation list sizes
)

# Get evaluation results
ubcf_results <- getConfusionMatrix(ubcf_eval)[[1]]
print("Evaluation results by number of recommendations:")
print(ubcf_results)

# Calculate RMSE
ubcf_predictions <- predict(ubcf_model, getData(eval_scheme, "known"))
ubcf_accuracy <- calcPredictionAccuracy(ubcf_predictions, 
                                        getData(eval_scheme, "unknown"), 
                                        goodRating = 3.5,
                                        given = 5)  # Number of items used for prediction
cat("\nPrediction accuracy metrics:\n")
print(ubcf_accuracy)

# ============================================================================
# 8. Compare with a Random Recommender (Baseline)
# ============================================================================
cat("\nComparing with random recommender (baseline)...\n")

# Create and evaluate a random recommender for comparison
random_eval <- evaluate(
  eval_scheme,
  method = "RANDOM",
  n = c(1, 5, 10, 15, 20)
)

# Compare UBCF vs Random
cat("\nComparison of UBCF vs Random Recommender:\n")
ubcf_results_n10 <- getConfusionMatrix(ubcf_eval)[[1]][3,]  # Results for n=10
random_results_n10 <- getConfusionMatrix(random_eval)[[1]][3,]  # Results for n=10

comparison <- rbind(
  UBCF = ubcf_results_n10,
  Random = random_results_n10
)
print(comparison)

# ============================================================================
# Done
# ============================================================================
cat("\n===============================================\n")
cat("UBCF Implementation Complete!\n")
cat("===============================================\n")